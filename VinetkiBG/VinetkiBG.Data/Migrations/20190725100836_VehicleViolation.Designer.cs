// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VinetkiBG.Data;

namespace VinetkiBG.Data.Migrations
{
    [DbContext(typeof(VinetkiBGDbContext))]
    [Migration("20190725100836_VehicleViolation")]
    partial class VehicleViolation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("VinetkiBG.Domain.Receipt", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("LicensePlate")
                        .IsRequired();

                    b.Property<decimal>("Price");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("VehicleType")
                        .IsRequired();

                    b.Property<string>("VignetteId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("VignetteId")
                        .IsUnique();

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("VinetkiBG.Domain.Vechile", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(12);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("OwnerId");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("VechileType")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("VignetteId");

                    b.Property<string>("ViolationId");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Vechiles");
                });

            modelBuilder.Entity("VinetkiBG.Domain.Vignette", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Caterory")
                        .IsRequired();

                    b.Property<DateTime>("EndDate");

                    b.Property<decimal>("Price");

                    b.Property<string>("RecipietId");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("VechileId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("VechileId")
                        .IsUnique();

                    b.ToTable("Vignettes");
                });

            modelBuilder.Entity("VinetkiBG.Domain.VinetkiBGUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("VinetkiBG.Domain.Violation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("PenaltyAmount");

                    b.Property<string>("Road")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.Property<string>("VehicleId")
                        .IsRequired();

                    b.Property<DateTime>("ViolationDate");

                    b.Property<string>("ViolationType")
                        .IsRequired();

                    b.Property<string>("ViolatorId");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.HasIndex("ViolatorId");

                    b.ToTable("Violations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("VinetkiBG.Domain.VinetkiBGUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("VinetkiBG.Domain.VinetkiBGUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VinetkiBG.Domain.VinetkiBGUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("VinetkiBG.Domain.VinetkiBGUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VinetkiBG.Domain.Receipt", b =>
                {
                    b.HasOne("VinetkiBG.Domain.Vignette", "Vignette")
                        .WithOne("Receipt")
                        .HasForeignKey("VinetkiBG.Domain.Receipt", "VignetteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VinetkiBG.Domain.Vechile", b =>
                {
                    b.HasOne("VinetkiBG.Domain.VinetkiBGUser", "Owner")
                        .WithMany("Vechiles")
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("VinetkiBG.Domain.Vignette", b =>
                {
                    b.HasOne("VinetkiBG.Domain.Vechile", "Vechile")
                        .WithOne("Vignette")
                        .HasForeignKey("VinetkiBG.Domain.Vignette", "VechileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VinetkiBG.Domain.Violation", b =>
                {
                    b.HasOne("VinetkiBG.Domain.Vechile", "Vehicle")
                        .WithOne("Violation")
                        .HasForeignKey("VinetkiBG.Domain.Violation", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VinetkiBG.Domain.VinetkiBGUser", "Violator")
                        .WithMany("Violations")
                        .HasForeignKey("ViolatorId");
                });
#pragma warning restore 612, 618
        }
    }
}
